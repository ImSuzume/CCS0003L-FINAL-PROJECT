#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <limits>

using namespace std;

struct Account
{
    string FName;
    string LName;
    string MName;
    string address;
    string AccType;
    string birthday;
    char gender;
    float initial;
    float current;
    string pin; // Changed pin data type to string
    int AccNum;
};

// Display menu
void Menu()
{
	system("color 9F");
	
	time_t now = time(0);
    char* dt = ctime(&now);
	tm *gmtm = gmtime(&now);
    dt = asctime(gmtm);
	
	
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb" << endl;
    cout << "\t\t\t\xdb\t\t   MENU              \t \xdb   " << endl;
    cout << "\t\t\t\xdb   1. Open a New Account             \t \xdb        " << endl;
    cout << "\t\t\t\xdb   2. Balance Inquiry                 \t \xdb       " << endl;
    cout << "\t\t\t\xdb   3. Deposit                       \t \xdb      " << endl;
    cout << "\t\t\t\xdb   4. Withdraw                       \t \xdb      " << endl;
    cout << "\t\t\t\xdb   5. View Account Information       \t \xdb      " << endl;
    cout << "\t\t\t\xdb   6. Close Account                   \t \xdb     " << endl;
    cout << "\t\t\t\xdb   7. Exit Program                    \t \xdb     " << endl;
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
    cout << "\t\t\t\t" << dt << endl;
}

// Generate new account number
int generateAccountNumber()
{
    srand(time(0));
    return rand() % 900000 + 100000; // Generates a 6-digit number
}

// Function to create account
void openNewAccount(Account* accounts, int& totalAccounts)
{
    Account newAccount;
    
    
    
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
    cout << "\t\t\t\t      ACCOUNT SIGN UP \n" << endl;
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
    
    cout << "\t\t\tEnter First Name: ";
    cin >> newAccount.FName;
    cout << "\t\t\tEnter Last Name: ";
    cin >> newAccount.LName;
    cout << "\t\t\tEnter Middle Name: ";
    cin >> newAccount.MName;
    cout << "\t\t\tEnter Address: ";
    cin.ignore();
    getline(cin, newAccount.address);
    cout << "\t\t\tEnter Gender (M/F): ";
    cin >> newAccount.gender;
    cout << "\t\t\t(Savings Account or Current Account) \n\t\t\tEnter Account Type: ";
    cin.ignore();
    getline(cin, newAccount.AccType);
    cout << "\t\t\tEnter Initial Deposit: ";
    cin >> newAccount.initial;
    newAccount.current = newAccount.initial;
    cout << "\t\t\tEnter PIN (6-digit number): ";
    cin >> newAccount.pin;

    // Check if PIN is exactly 6 characters long and contains only digits
    if (newAccount.pin.length() != 6 || newAccount.pin.find_first_not_of("0123456789") != string::npos) {
        cout << "Invalid PIN. Please enter a 6-digit PIN." << endl;
        return;
    }

    newAccount.AccNum = generateAccountNumber();
    cout << "\t\t\tYour account number is: " << newAccount.AccNum << endl;
    cout << endl;
    accounts[totalAccounts] = newAccount;
    ++totalAccounts;
}

// Function to inquire balance
void balanceInquiry(Account* accounts, int totalAccounts)
{
    int accountNumber;
    string pin;


	cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
    cout << "\t\t\t\t      BALANCE INQUIRY \n" << endl;
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
    
    cout << "\n\t\t\t\Enter your account number: "; 
    cin >> accountNumber;

    cout << "\t\t\tEnter your PIN: ";
    cin >> pin;

    // Check if PIN is exactly 6 characters long and contains only digits
    if (pin.length() != 6 || pin.find_first_not_of("0123456789") != string::npos) {
        cout << "\t\t\tInvalid PIN. Please enter a 6-digit PIN." << endl;
        return;
    }

    // Find the account by account number
    for (int i = 0; i < totalAccounts; ++i)
    {
        if (accounts[i].AccNum == accountNumber && accounts[i].pin == pin)
        {
            cout << "\t\t\tCurrent Balance: $" << accounts[i].current << endl;
            return;
        }
    }
    cout << "\t\t\tAccount not found." << endl;
}

// Function to deposit money into an account
void deposit(Account* accounts, int totalAccounts)
{
    int accountNumber;
    string pin;
    float amount;
    
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
    cout << "\t\t\t\t          DEPOSIT \n" << endl;
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
  
    cout << "\t\t\tEnter Account Number: ";
    cin >> accountNumber;

    cout << "\t\t\tEnter PIN: ";
    cin >> pin;

    // Check if PIN is exactly 6 characters long and contains only digits
    if (pin.length() != 6 || pin.find_first_not_of("0123456789") != string::npos) {
        cout << "\t\t\tInvalid PIN. Please enter a 6-digit PIN." << endl;
        return;
    }

    // Find the account by account number
    for (int i = 0; i < totalAccounts; ++i)
    {
        if (accounts[i].AccNum == accountNumber && accounts[i].pin == pin)
        {
        	cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
   	 		cout << "\t\t\t\t      DEPOSIT \n" << endl;
    		cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
            
			cout << "\t\t\tEnter Amount to Deposit: $";
            cin >> amount;

            // Validate deposit amount
            if (amount < 0) {
                cout << "\t\t\tInvalid deposit amount. Please enter a non-negative amount." << endl;
                return;
            }

            accounts[i].current += amount;
            cout << "\t\t\tDeposit Successful. Current Balance: $" << accounts[i].current << endl;
            return;
        }
    }
    cout << "\t\t\tAccount not found." << endl;
}


// Function to withdraw amount from account
void withdraw(Account accounts[], int totalAccounts)
{
    int accountNumber;
    string pin;
    float amount;

	cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
    cout << "\t\t\t\t           WITHDRAW \n" << endl;
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;


    cout << "\n\t\t\tEnter your account number: ";
    cin >> accountNumber;

    cout << "\t\t\tEnter your PIN: ";
    cin >> pin;

    // Check if PIN is exactly 6 characters long and contains only digits
    if (pin.length() != 6 || pin.find_first_not_of("0123456789") != string::npos) {
        cout << "\t\t\tInvalid PIN. Please enter a 6-digit PIN." << endl;
        return;
    }

    // Search for the account by account number
    for (int i = 0; i < totalAccounts; ++i)
    {
        if (accounts[i].AccNum == accountNumber && accounts[i].pin == pin)
        {
            cout << "\t\t\tEnter the amount to withdraw: $";
            cin >> amount;

            // Validate withdrawal amount
            if (amount < 0 || amount > 300 || amount > accounts[i].current)
            {
                cout << "\t\t\tInvalid withdrawal amount. Please enter a positive amount less than or equal to your current balance." << endl;
                return;
            }

            char confirm;
            cout << "\t\t\tConfirm withdrawal of $" << amount << "? (Y/N): ";
            cin >> confirm;

            if (confirm == 'Y' || confirm == 'y')
            {
                accounts[i].current -= amount;
                cout << "\n\t\t\tTransaction successful. New balance: $" << accounts[i].current << endl;
                return;
            }
            else
            {
                cout << "\t\t\t\nWithdrawal canceled." << endl;
                return;
            }
        }
    }

    cout << "\t\t\tAccount not found or PIN is incorrect." << endl;
}

// Function to view account information
void viewAccountInfo(const Account accounts[], int totalAccounts)
{
    int accountNumber;
    string pin;

	cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
    cout << "\t\t\t\t    ACCOUNT INFORMATION \n" << endl;
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;


    cout << "\n\t\t\tEnter your account number: ";
    cin >> accountNumber;

    cout << "\t\t\tEnter your PIN: ";
    cin >> pin;

    // Check if PIN is only 6 characters long and contains digits
    if (pin.length() != 6 || pin.find_first_not_of("0123456789") != string::npos)
    {
        cout << "\t\t\tInvalid PIN. Please enter a 6-digit PIN." << endl;
        return;
    }

    // Search for the account by account number
    for (int i = 0; i < totalAccounts; ++i)
    {
        if (accounts[i].AccNum == accountNumber && accounts[i].pin == pin)
        {
            cout << "\n\t\t\tAccount Information:" << endl;
            cout << "\t\t\tAccount Holder: " << accounts[i].FName << " " << accounts[i].MName << " " << accounts[i].LName << endl;
            cout << "\t\t\tAddress: " << accounts[i].address << endl;
            cout << "\t\t\tBirthday: " << accounts[i].birthday << endl;
            cout << "\t\t\tGender: " << accounts[i].gender << endl;
            cout << "\t\t\tAccount Type: " << accounts[i].AccType << endl;
            cout << "\t\t\tInitial Deposit: $" << accounts[i].initial << endl;
            cout << "\t\t\tCurrent Balance: $" << accounts[i].current << endl;
            return;
        }
    }

    cout << "\t\t\tAccount not found or PIN is incorrect." << endl;
}

// Function to close account
void closeAccount(Account* accounts, int& totalAccounts)
{
    int accountNum;
    string pin;

	cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;
    cout << "\t\t\t\t      CLOSE ACCOUNT  \n" << endl;
    cout << "\t\t\t\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\xdb\n" << endl;


    cout << "\n\t\t\tEnter your account number: ";
    cin >> accountNum;

    // Search for the account by account number
    for (int i = 0; i < totalAccounts; ++i)
    {
        if (accounts[i].AccNum == accountNum)
        {
            cout << "\t\t\tEnter your PIN: ";
            cin >> pin;

            // Check if PIN is 6 characters long and contains only digits
            if (pin.length() != 6 || pin.find_first_not_of("0123456789") != string::npos)
            {
                cout << "\t\t\tInvalid PIN. Please enter a 6-digit PIN." << endl;
                return;
            }

            // If the PIN matches, proceed with account deletion
            if (accounts[i].pin == pin)
            {
                if (accounts[i].current == 0)
                {
                    // Shift remaining accounts in the array to remove the closed account
                    for (int j = i; j < totalAccounts - 1; ++j)
                    {
                        accounts[j] = accounts[j + 1];
                    }
                    --totalAccounts;
                    cout << "\t\t\tAccount successfully deleted." << endl;
                    return;
                }
                else
                {
                    cout << "\t\t\tYou may only close an account if it has a $0 balance." << endl;
                    return;
                }
            }
            else
            {
                cout << "\t\t\tIncorrect PIN. Deletion canceled." << endl;
                return;
            }
        }
    }

    cout << "\t\t\tAccount not found." << endl;
}

int main()
{
    const int MAX_ACCOUNTS = 10; // Maximum number of accounts
    Account accounts[MAX_ACCOUNTS]; // Array of accounts; max 10
    int totalAccounts = 0;
    int choice;
    bool exit = false;

    while (!exit)
    {
        Menu();
        cout << "\t\t\tEnter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            system("cls");
            if (totalAccounts < MAX_ACCOUNTS)
            {
                openNewAccount(accounts, totalAccounts);
            }
            else
            {
                cout << "\t\t\tMaximum number of accounts reached." << endl;
            }
            break;
        case 2:
            system("cls");
            balanceInquiry(accounts, totalAccounts);
            break;
        case 3:
            system("cls");
            deposit(accounts, totalAccounts);
            break;
        case 4:
            system("cls");
            withdraw(accounts, totalAccounts);
            break;
        case 5:
            system("cls");
            viewAccountInfo(accounts, totalAccounts);
            break;
        case 6:
            system("cls");
            closeAccount(accounts, totalAccounts);
            break;
        case 7:
            system("cls");
            cout << "\t\t\tThank you for using the program!" << endl;
            exit = true;
            break;
        default:
            cout << "\t\t\tInvalid choice. Please enter a valid option." << endl;
            break;
        }
    }
    return 0;
}
